package config

import (
	"fmt"
	"log"
	"os"
	"github.com/joho/godotenv"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"database/sql"
	_ "github.com/lib/pq" // PostgreSQL driver
)

type DBConfig struct {
	// MongoDB Configuration
	MongoURI    string
	MongoDBName string

	// PostgreSQL Configuration
	PostgresHost     string
	PostgresPort     string
	PostgresUser     string
	PostgresPassword string
	PostgresDBName   string
}

func Config() *DBConfig {
	// Load environment variables from a .env file (optional)
	err := godotenv.Load()
	if err != nil {
		log.Println("No .env file found, reading system environment variables")
	}

	dbConfig := &DBConfig{
		// MongoDB Configuration
		MongoURI:    getEnv("MONGO_URI", "mongodb://localhost:27017"),
		MongoDBName: getEnv("MONGO_DB_NAME", "my_mongodb"),

		// PostgreSQL Configuration (Comment this section out if you prefer MongoDB)
		PostgresHost:     getEnv("POSTGRES_HOST", "localhost"),
		PostgresPort:     getEnv("POSTGRES_PORT", "5432"),
		PostgresUser:     getEnv("POSTGRES_USER", "postgres"),
		PostgresPassword: getEnv("POSTGRES_PASSWORD", "password"),
		PostgresDBName:   getEnv("POSTGRES_DB_NAME", "my_postgres_db"),
	}

	fmt.Printf("Configured databases: MongoDB: %s, PostgreSQL: %s\n", dbConfig.MongoDBName, dbConfig.PostgresDBName)
	return dbConfig
}

// Connect to MongoDB
func ConnectMongoDB(config *DBConfig) (*mongo.Client, error) {
	clientOptions := options.Client().ApplyURI(config.MongoURI)
	client, err := mongo.Connect(context.TODO(), clientOptions)
	if err != nil {
		return nil, err
	}
	err = client.Ping(context.TODO(), nil)
	if err != nil {
		return nil, err
	}
	fmt.Println("Connected to MongoDB!")
	return client, nil
}

// Connect to PostgreSQL
func ConnectPostgreSQL(config *DBConfig) (*sql.DB, error) {
	// Uncomment if you prefer PostgreSQL
	/*
		psqlInfo := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
			config.PostgresHost, config.PostgresPort, config.PostgresUser, config.PostgresPassword, config.PostgresDBName)
		db, err := sql.Open("postgres", psqlInfo)
		if err != nil {
			return nil, err
		}
		err = db.Ping()
		if err != nil {
			return nil, err
		}
		fmt.Println("Connected to PostgreSQL!")
		return db, nil
	*/
	return nil, nil
}

// Helper function to read environment variables with a default fallback
func getEnv(key, defaultValue string) string {
	value, exists := os.LookupEnv(key)
	if !exists {
		return defaultValue
	}
	return value
}
